// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Vinay Veerappa
// 
// HopiPlaka levels and customisable # of partions
// 


//@version=5
indicator(title='VxV Hopi Levels', shorttitle='VxV Hopi', overlay=true,max_lines_count=500, max_labels_count=500)


line_width = input.int(defval=1, title="Line Width", minval=1, group="Support & Resistance")

PO3Number =  input.int(27, "PO3 NUmber", options = [3,27,81,243,729,2187], inline ='-2', group = 'Hopi Levels' )
partions = input.int(defval=0, title="Number of Partions", minval=0, group="Hopi Levels")


group_layout                    = 'Layout for Lines'

input_text_size                 = input.int(title='Text Size ', defval=2, group=group_layout, inline='text', minval=1, maxval=5)
input_text_offset               = input.int(title='Offset ', defval=15, group=group_layout, inline='text')

input_line_size                 = input.int(title='Line Size ', defval=1, group=group_layout, inline='line', minval=1, maxval=5)
input_line_style                = input.string(title='Style ', defval='Solid', options=['Dashed', 'Dotted', 'Solid'], inline='line', group=group_layout)

input_color_r                   = input.color(title='text colour', defval=color.gray, group=group_layout, inline='color_r')


iEnableRB                      = input.bool(title = "Enable Rejection Block", defval = false,group = "GoldBack Lines to Enable")
iEnableOB                      = input.bool(title = "Enable Order Block", defval = true,group = "GoldBack Lines to Enable")
iEnableFVG                      = input.bool(title = "Enable FVG", defval = true,group = "GoldBack Lines to Enable")
iEnableLV                      = input.bool(title = "Enable Liquidity Void", defval = true,group = "GoldBack Lines to Enable")
iEnableBrk                      = input.bool(title = "Enable Breaker Block", defval = true,group = "GoldBack Lines to Enable")
iEnableMB                      = input.bool(title = "Enable Mitigation Block", defval = false,group = "GoldBack Lines to Enable")

iEnableNonGBLevels_35_65    =   input.bool(title = "Enable 0.35 and 0.65 Non GB Levels", defval = false,group = "Non GoldBack Lines to Enable")
iEnableNonGBLevels_23_77    =   input.bool(title = "Enable 0.23 and 0.77 Non GB Levels", defval = false,group = "Non GoldBack Lines to Enable")


getLineStyle(inLineStyle) =>
    line_style      = switch inLineStyle
        'Dashed'    =>  line.style_dashed
        'Dotted'    =>  line.style_dotted
        'Solid'     =>  line.style_solid
    line_style


getTextSize(inTextSize) =>
    text_size       = switch inTextSize 
        1           =>  size.tiny
        2           =>  size.small
        3           =>  size.normal
        4           =>  size.large
        =>              size.huge
    text_size


var style_line              = getLineStyle(input_line_style)
var size_text               = getTextSize(input_text_size)

int MAX_LEVELS = partions*2
var Hopi_Labels                = array.new_label()
var Hopi_Lines                 = array.new_line() //MAX_LEVELS,    na

var label label1 = na
var label label2 = na
 


create_line_label( lvl, lvl2, txt1,txt2, colour, lineWidth)=>
    
    t1 = timestamp("America/New_York", year, month,dayofmonth, 16, 00, 00)
    
    array.push(Hopi_Lines, lvl != 0 ? line.new(x1=bar_index - 100, y1=lvl, x2=bar_index+input_text_offset-5, y2=lvl, extend=extend.left, width=lineWidth, color=colour) : na)
    array.push(Hopi_Lines, lvl2 != 0 ? line.new(x1=bar_index - 100, y1=lvl2, x2=bar_index+input_text_offset-5, y2=lvl2, extend=extend.left, width=lineWidth, color=colour) : na)
    if not na(lvl)
        array.push(Hopi_Labels, lvl != 0 ? label.new(bar_index + input_text_offset, lvl, text=txt1, style=label.style_none, textcolor=input_color_r,size =size_text) : label(na))

    if not na(lvl2)
        array.push(Hopi_Labels, lvl2 != 0 ? label.new(bar_index + input_text_offset, lvl2, text=txt2, style=label.style_none, textcolor=input_color_r,size =size_text) : label(na))

  

create_goldbach_levels(lvl, lvl2, txt)=>
 
    var float h = na
    var float l = na

   // List of goldbach numbers to use
    // 0.03,0.97
    // 0.11,0.89 
    // 0.17,0.83
    // 0.29, 0.71
    // 0.41, 0.59
    // 0.47 ,0.53
    // 0.5
    // non GB 0.35, 0.65, 0.23, 0.77
    // extensions 1.111, -0.111
    fib_array = array.from(0,1,0.03,0.97, 0.11,0.89 ,0.17,0.83, 0.29, 0.71, 0.41, 0.59,0.47 ,0.53, 0.5 )
    fib_array_labels = array.from("High","High","RB (0.03)","RB (0.97)","OB (0.11)","OB (0.89)","FVG (0.17) ","FVG (0.83)","LV (0.29)","LV (0.71)","Brk (0.41)","Brk (0.59)","MB (0.47)","MB (0.53)","EQ (0.5)")
    fib_array_colours =array.from( color.black,color.maroon,color.olive,color.orange,color.purple,color.aqua,color.yellow,color.red, color.silver)

    h := lvl2
    l := lvl
    distance = h-l

    create_line_label(l+array.get(fib_array,0)*distance,l+ array.get(fib_array,1)*distance,array.get(fib_array_labels,0),array.get(fib_array_labels,1), array.get(fib_array_colours,0) ,line_width+1)
    create_line_label(l+array.get(fib_array,14)*distance,0,array.get(fib_array_labels,14), array.get(fib_array_labels,1),array.get(fib_array_colours,7) ,line_width+1)

    if (iEnableRB)
        create_line_label(l+array.get(fib_array,2)*distance,l+ array.get(fib_array,3)*distance,array.get(fib_array_labels,2),array.get(fib_array_labels,3), array.get(fib_array_colours,1) ,line_width)
    if (iEnableOB)
        create_line_label(l+array.get(fib_array,4)*distance,l+ array.get(fib_array,5)*distance,array.get(fib_array_labels,4),array.get(fib_array_labels,5), array.get(fib_array_colours,2) ,line_width)
    if (iEnableFVG)
        create_line_label(l+array.get(fib_array,6)*distance,l+ array.get(fib_array,7)*distance,array.get(fib_array_labels,6),array.get(fib_array_labels,7), array.get(fib_array_colours,3) ,line_width)
    if (iEnableLV)
        create_line_label(l+array.get(fib_array,8)*distance,l+ array.get(fib_array,9)*distance,array.get(fib_array_labels,8),array.get(fib_array_labels,9), array.get(fib_array_colours,4) ,line_width)
    if (iEnableBrk)
        create_line_label(l+array.get(fib_array,10)*distance,l+ array.get(fib_array,11)*distance,array.get(fib_array_labels,10),array.get(fib_array_labels,11), array.get(fib_array_colours,5) ,line_width)
    if (iEnableMB)
        create_line_label(l+array.get(fib_array,12)*distance,l+ array.get(fib_array,13)*distance,array.get(fib_array_labels,12),array.get(fib_array_labels,13), array.get(fib_array_colours,6) ,line_width)
    
    if (iEnableNonGBLevels_35_65)
        create_line_label(l+0.35*distance,l+ 0.65*distance,"NonGB_35","NonGB_65", array.get(fib_array_colours,8) ,line_width)
    if (iEnableNonGBLevels_23_77)
        create_line_label(l+0.23*distance,l+ 0.77*distance,"NonGB_23","NonGB_77", array.get(fib_array_colours,8) ,line_width)    
    
// Calculate the Hopi Partion numbers based on current price
float currentPrice = close


float num = math.floor( currentPrice/PO3Number) * PO3Number
dealingRangelow = array.new<float>(0) 
dealingRangeHigh = array.new<float>(0)

float startingPartion = num - (partions * PO3Number)
// We use `var` to only initialize the table on the first bar.
//var table Po3Display = table.new(position.top_right, 4, partions*2+1)
//var table PartionDebug = table.new(position.bottom_right, 1, 3)
//table.cell(PartionDebug, 0, 0, str.tostring(num))
//table.cell(PartionDebug, 0, 2, str.tostring(startingPartion))

//Cleanup Lines and Labels
// remove all Lines
size = array.size(Hopi_Lines) - 1
if (size >0)
    for i = 0 to size
        lb = array.get(Hopi_Lines, i)
        line.delete(lb)

    // remove all labels
    size := array.size(Hopi_Labels) - 1
    for i = 0 to size
        lb = array.get(Hopi_Labels, i)
        label.delete(lb)


int i = 0
//for  i = 0 to (partions == 0 ? 1 :(partions*2)-1) by 1
while i <= (partions == 0 ? 0 :(partions*2))
    
    array.push(dealingRangelow ,startingPartion)
    array.push(dealingRangeHigh ,array.get(dealingRangelow,i)+PO3Number )
    startingPartion := startingPartion+PO3Number

   // table.cell(Po3Display, 0, i, str.tostring(i))
   // table.cell(Po3Display, 1, i, str.tostring(array.get(dealingRangelow,i)))
    //table.cell(Po3Display, 2, i, str.tostring(array.get(dealingRangeHigh,i)))
    //create_goldbach_levels(array.get(dealingRangelow,i), array.get(dealingRangeHigh,i), str.tostring(array.get(dealingRangelow,i)))
    //create_line_label(array.get(dealingRangelow,i), array.get(dealingRangeHigh,i), str.tostring(array.get(dealingRangelow,i))+ " "+ str.tostring(array.get(dealingRangeHigh,i)), color.black)
    //table.cell(Po3Display, 3, i, str.tostring("DRAW "+str.tostring(array.get(dealingRangelow,i))+ " "+ str.tostring(array.get(dealingRangeHigh,i)) ) )
    i := i+1

////table.cell(PartionDebug, 0, 1, str.tostring(array.size(dealingRangelow)))
log.info("\n Size of array is {0}",array.size(dealingRangelow))
if barstate.islast
    for i = 0 to (array.size(dealingRangelow) == 0 ? na : array.size(dealingRangelow)-1) by 1
        create_goldbach_levels(array.get(dealingRangelow,i), array.get(dealingRangeHigh,i), str.tostring(array.get(dealingRangelow,i)))

        //create_line_label(array.get(dealingRangelow,i), array.get(dealingRangeHigh,i), str.tostring(array.get(dealingRangelow,i))+ " "+ str.tostring(array.get(dealingRangeHigh,i)), color.black)

// if barstate.islast
//     create_line_label(array.get(dealingRangelow,0), array.get(dealingRangeHigh,0), str.tostring(array.get(dealingRangelow,0)))
//     create_line_label(array.get(dealingRangelow,1), array.get(dealingRangeHigh,1), str.tostring(array.get(dealingRangelow,1)))
//     create_line_label(array.get(dealingRangelow,2), array.get(dealingRangeHigh,2), str.tostring(array.get(dealingRangelow,2)))
//     create_line_label(array.get(dealingRangelow,3), array.get(dealingRangeHigh,3), str.tostring(array.get(dealingRangelow,3)))
//     create_line_label(array.get(dealingRangelow,4), array.get(dealingRangeHigh,4), str.tostring(array.get(dealingRangelow,4)))
 